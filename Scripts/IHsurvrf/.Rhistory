plot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Print the plot
print(plot)
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
arrange(desc(Count))
return(subset)
}
}
# sex
summary.plot.continuous(data = data, columnName = "sex", discrete = TRUE)
# age
summary.plot.continuous(data = data, columnName = "age", discrete = FALSE)
# sex
summary.plot.continuous(data = data, columnName = "sex", discrete = TRUE)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
plot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Print the plot
print(plot)
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = !!sym(columnName), y = Count, fill = !!sym(columnName))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Count of", columnName)) +
scale_fill_viridis_d() # Use a discrete color scale
# Print the plot
print(plot)
return(subset)
}
}
# sex
summary.plot.continuous(data = data, columnName = "sex", discrete = TRUE)
subset
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
plot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Print the plot
print(plot)
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = !!sym(columnName), y = Count, fill = !!sym(columnName))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Count of", columnName)) +
scale_fill_viridis_d() # Use a discrete color scale
# Print the plot
print(plot)
return(subset)
}
}
# sex
summary.plot.continuous(data = data, columnName = "sex", discrete = TRUE)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
plot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Print the plot
print(plot)
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = !!sym(columnName), y = Count, fill = !!sym(columnName))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Count of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# sex
summary.plot.continuous(data = data, columnName = "sex", discrete = TRUE)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
plot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Print the plot
print(plot)
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = as.factor(!!sym(columnName)), y = Count, fill = as.factor(!!sym(columnName)))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Count of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# sex
summary.plot.continuous(data = data, columnName = "sex", discrete = TRUE)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
plot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Print the plot
print(plot)
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
mutate(Percentage = (Count / sum(Count)) * 100) %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = as.factor(!!sym(columnName)), y = Percentage, fill = as.factor(!!sym(columnName)))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Percentage") +
theme_minimal() +
ggtitle(paste("Percentage of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# sex
summary.plot.continuous(data = data, columnName = "sex", discrete = TRUE)
# Benson.Immediate
summary.plot.continuous(data = data, columnName = "Benson.Immediate",  discrete = FALSE)
# Benson.Recall
summary.plot.continuous(data = data, columnName = "Benson.Recall",  discrete = FALSE)
# Color.Trails.II
summary.plot.continuous(data = data, columnName = "Color.Trails.II", discrete = FALSE)
# Color.Trails.II
summary.plot.continuous(data = data, columnName = "Color.Trails.II", discrete = FALSE)
library(patchwork)
install.packages("patchwork")
library(gridExtra)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
densityplot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Scatter plot
scatter_plot <- ggplot(data, aes(x = !!sym(columnName), y = ..count..)) +
geom_point() +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Scatterplot of", columnName))
# Print the plot
print(grid.arrange(bar_plot, scatter_plot, ncol = 1))
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
mutate(Percentage = (Count / sum(Count)) * 100) %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = as.factor(!!sym(columnName)), y = Percentage, fill = as.factor(!!sym(columnName)))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Percentage") +
theme_minimal() +
ggtitle(paste("Percentage of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# age
summary.plot.continuous(data = data, columnName = "age", discrete = FALSE)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
densityplot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Scatter plot
scatter_plot <- ggplot(data, aes(x = !!sym(columnName), y = ..count..)) +
geom_point() +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Scatterplot of", columnName))
# Print the plot
print(grid.arrange(densityplot, scatter_plot, ncol = 1))
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
mutate(Percentage = (Count / sum(Count)) * 100) %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = as.factor(!!sym(columnName)), y = Percentage, fill = as.factor(!!sym(columnName)))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Percentage") +
theme_minimal() +
ggtitle(paste("Percentage of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# age
summary.plot.continuous(data = data, columnName = "age", discrete = FALSE)
View(data)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
densityplot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Print the plot
print(densityplot)
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
mutate(Percentage = (Count / sum(Count)) * 100) %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = as.factor(!!sym(columnName)), y = Percentage, fill = as.factor(!!sym(columnName)))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Percentage") +
theme_minimal() +
ggtitle(paste("Percentage of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# age
summary.plot.continuous(data = data, columnName = "age", discrete = FALSE)
crit <- .CriticalValueCriterion(params)
set.seed(123)
source("R/SCRATCH_VerifyModels.R")
setwd("~/Desktop/survrf/Scripts/IHsurvrf")
set.seed(123)
source("R/SCRATCH_VerifyModels.R")
source("R/class_IH.Parameters.R")
source("R/IH.survRF.R")
source("R/IH.predictSurvTree.R")
#
##
library(survival)
library(IHsurvrf)
