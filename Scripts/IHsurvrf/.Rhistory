print(plot)
return(subset)
}
}
# sex
summary.plot.continuous(data = data, columnName = "sex", discrete = TRUE)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
plot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Print the plot
print(plot)
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = !!sym(columnName), y = Count, fill = !!sym(columnName))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Count of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# sex
summary.plot.continuous(data = data, columnName = "sex", discrete = TRUE)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
plot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Print the plot
print(plot)
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = as.factor(!!sym(columnName)), y = Count, fill = as.factor(!!sym(columnName)))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Count of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# sex
summary.plot.continuous(data = data, columnName = "sex", discrete = TRUE)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
plot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Print the plot
print(plot)
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
mutate(Percentage = (Count / sum(Count)) * 100) %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = as.factor(!!sym(columnName)), y = Percentage, fill = as.factor(!!sym(columnName)))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Percentage") +
theme_minimal() +
ggtitle(paste("Percentage of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# sex
summary.plot.continuous(data = data, columnName = "sex", discrete = TRUE)
# Benson.Immediate
summary.plot.continuous(data = data, columnName = "Benson.Immediate",  discrete = FALSE)
# Benson.Recall
summary.plot.continuous(data = data, columnName = "Benson.Recall",  discrete = FALSE)
# Color.Trails.II
summary.plot.continuous(data = data, columnName = "Color.Trails.II", discrete = FALSE)
# Color.Trails.II
summary.plot.continuous(data = data, columnName = "Color.Trails.II", discrete = FALSE)
library(patchwork)
install.packages("patchwork")
library(gridExtra)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
densityplot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Scatter plot
scatter_plot <- ggplot(data, aes(x = !!sym(columnName), y = ..count..)) +
geom_point() +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Scatterplot of", columnName))
# Print the plot
print(grid.arrange(bar_plot, scatter_plot, ncol = 1))
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
mutate(Percentage = (Count / sum(Count)) * 100) %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = as.factor(!!sym(columnName)), y = Percentage, fill = as.factor(!!sym(columnName)))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Percentage") +
theme_minimal() +
ggtitle(paste("Percentage of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# age
summary.plot.continuous(data = data, columnName = "age", discrete = FALSE)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
densityplot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Scatter plot
scatter_plot <- ggplot(data, aes(x = !!sym(columnName), y = ..count..)) +
geom_point() +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Scatterplot of", columnName))
# Print the plot
print(grid.arrange(densityplot, scatter_plot, ncol = 1))
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
mutate(Percentage = (Count / sum(Count)) * 100) %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = as.factor(!!sym(columnName)), y = Percentage, fill = as.factor(!!sym(columnName)))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Percentage") +
theme_minimal() +
ggtitle(paste("Percentage of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# age
summary.plot.continuous(data = data, columnName = "age", discrete = FALSE)
View(data)
summary.plot.continuous  <- function(data, columnName, discrete = FALSE) {
# Check if the columnName exists in the dataframe
if(!columnName %in% names(data)) {
stop("The specified column does not exist in the dataframe.")
}
## only run this code if discrete  is FALSE
if(!discrete){
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
# calculate the summary statistics,ignoring all the NA values
summarise(
Min = min(!!sym(columnName), na.rm = TRUE),
Max = max(!!sym(columnName), na.rm = TRUE),
Mean = mean(!!sym(columnName), na.rm = TRUE),
Median = median(!!sym(columnName), na.rm = TRUE),
SD = sd(!!sym(columnName), na.rm = TRUE),
Q1 = quantile(!!sym(columnName), 0.25, na.rm = TRUE),
Q3 = quantile(!!sym(columnName), 0.75, na.rm = TRUE),
IQR = IQR(!!sym(columnName), na.rm = TRUE)
)
# Plotting
densityplot <- data %>%
select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
ggplot(aes(x = !!sym(columnName))) +
geom_bar() +
geom_density(aes(y = ..count..), alpha = 0.5, fill = "blue", adjust = 1) +
labs(x = columnName, y = "Count") +
theme_minimal() +
ggtitle(paste("Distribution of", columnName))
# Print the plot
print(densityplot)
return(subset)
} else{
# Subset the dataframe to include only that column
# also include only rows where the column has non-NA values
subset <- data %>% select(!!sym(columnName)) %>%
filter(!is.na(!!sym(columnName))) %>%
count(!!sym(columnName), name = "Count") %>%
mutate(Percentage = (Count / sum(Count)) * 100) %>%
arrange(desc(Count))
# Plotting for discrete variables
plot <- ggplot(subset, aes(x = as.factor(!!sym(columnName)), y = Percentage, fill = as.factor(!!sym(columnName)))) +
geom_bar(stat = "identity") +
labs(x = columnName, y = "Percentage") +
theme_minimal() +
ggtitle(paste("Percentage of", columnName))
# Print the plot
print(plot)
return(subset)
}
}
# age
summary.plot.continuous(data = data, columnName = "age", discrete = FALSE)
crit <- .CriticalValueCriterion(params)
set.seed(123)
source("R/SCRATCH_VerifyModels.R")
setwd("~/Desktop/survrf/Scripts/IHsurvrf")
set.seed(123)
source("R/SCRATCH_VerifyModels.R")
source("R/class_IH.Parameters.R")
source("R/IH.survRF.R")
source("R/IH.predictSurvTree.R")
#
##
library(survival)
library(IHsurvrf)
library(IHsurvrf)
library(IHsurvrf)
library(IHsurvrf)
#### C21.simulation_body.R is to be run by source("C21.simulation_run.R")
# n             # training sample size
# n.eval        # evaluation sample size
# n.sim         # number of simulation replicates
# p = 5         # number of covariates (should agree with beta coefficients' dimension)
# tau = 1000    # total study length
# n.stages = 50 # number of stages
### 0. Get the setting number
## This section retrieves the settings from the command line arguments.
## It expects four arguments: beta, propensity, size, and crit.
## these are used to set the different beta, propensity, size, crit settings
## If these arguments are not provided, it sets default values.
arg <- commandArgs(trailingOnly = TRUE)
if (length(arg) < 4) {
warning("commandArgs was not provided. Being set as c(1,1,1,1).")
message("75 patients, ss = 30, max stages = 40, 50 simulation replicates, 10,000 eval, 10% censoring, OBS")
arg = c(2, 1, 1, 1) # by default
print(arg)
}
## renames the arguments for clarity
## also converts arguments to numeric format
names(arg)[1:4] = c("beta", "propensity", "size", "crit")
arg1 <- as.numeric(arg[1]) # 1..4
arg2 <- as.numeric(arg[2]) # 1..2
arg3 <- as.numeric(arg[3]) # 1..2
arg4 <- as.numeric(arg[4]) # 1..3
## extracts a date if provided, otherwise, set as the current date
arg.date <- if (is.na(arg[5]) | arg[5] == "") Sys.Date() else as.character(arg[5])
### 1. setup
# n.stages = 3 # number of stages
default <- list(
## evaluation sample size: 10000
n.eval = 10000,
## number of simulation replicates: 200
n.sim = 50,
## tau (days): total study length
tau = 1000,
## maximum number of stages
n.stages = 40,
## the stage we start at since we don't want issues with too small sample size
ss = 30)
# arg4 crit: a list containing different 2 different criterion with associated values
crit <- list(crit1 = list(criterion = "mean", crit.value = NULL, value = "truncated mean E[T]"),
crit2 = list(criterion = "surv.mean",
## 2 year survival in terms of days
crit.value = 730, value = "S(730)"))
# arg3 size: a list containing 2 training sample sizes
size <- list(small.sample.size = list(n = 75),
large.sample.size = list(n = 200))
# arg2 propensity
propensity <-   # (int), state
list(obs = list(beta.propensity = function(p) c(0, -rep(0.5, p))),  # no unmeasured confounder
rct  = list(beta.propensity = function(p) c(0, rep(0, p))))    # RCT
### NOTE: *I think* that we would change different settings for alpha (similar to arg1 beta) to get different censoring rates
## maybe also dif # of baseline variables, and different number of random state variables?
# arg1 beta: a list containing beta values for 4 different settings
# Create a list for the settings
coefs <- list(
setting1 = list(
coef_failure = list(
### 10% censoring
##  a1 + b1 * state + z1 * nstages + p1 * cumulative.length + g1 * action + h1*prior.visit.length +
###    r1 * action * state * nstages * cumulative.length*prior.visit.length
a = -6, b = -0.3, c = -0.5, z = -0.025, p = 0.02, g = -0.2, h = 0.008, r = 0.01
),
coef_nextvisit = list(
a = -3, b = -0.3, c = -0.05, z = -0.015, p = 0.025, g = -0.2, h = 0.008, r = 0.01
),
coef_censoring = list(
## a = -8 for 10% censoring
a = -8, b = -0.3, c = -0.6, z = -0.04, p = 0.02, g = -0.2, h = 0.008, r = 0.01
)
),
## higher censoring
setting2 = list(
coef_failure = list(
##  a1 + b1 * state + z1 * nstages + p1 * cumulative.length + g1 * action + h1*prior.visit.length +
###    r1 * action * state * nstages * cumulative.length*prior.visit.length
a = -6, b = -0.3, c = -0.5, z = -0.025, p = 0.02, g = -0.2, h = 0.008, r = 0.01
),
coef_nextvisit = list(
a = -3, b = -0.3, c = -0.05, z = -0.015, p = 0.025, g = -0.2, h = 0.008, r = 0.01
),
coef_censoring = list(
a = -7.5, b = -0.3, c = -0.6, z = -0.04, p = 0.02, g = -0.2, h = 0.008, r = 0.01
)
)
)
# Set names
names(coefs$setting1$coef_failure) <- paste0(names(coefs$setting1$coef_failure), "1")
names(coefs$setting1$coef_nextvisit) <- paste0(names(coefs$setting1$coef_nextvisit), "2")
names(coefs$setting1$coef_censoring) <- paste0(names(coefs$setting1$coef_censoring), "3")
names(coefs$setting2$coef_failure) <- paste0(names(coefs$setting2$coef_failure), "1")
names(coefs$setting2$coef_nextvisit) <- paste0(names(coefs$setting2$coef_nextvisit), "2")
names(coefs$setting2$coef_censoring) <- paste0(names(coefs$setting2$coef_censoring), "3")
# p.list: List of the number of covariates for the coefficient settings
## takes off 2 from intercept, nstages, cumulative.length, action, prior.visit.length, interaction between all of them
p.list <- (length(coefs[[arg1]]$coef_failure) - 6)
# setting1 n.boot 50 / n 300
setting = c(arg = list(arg), default, coefs[[arg1]]$coef_failure, coefs[[arg1]]$coef_nextvisit,
coefs[[arg1]]$coef_censoring, p = p.list,
propensity[[arg2]], size[[arg3]], crit[[arg4]])
### 2. put a selected setting into the global environment
cat("setting (beta, propensity, size, crit) ", arg, "\n")
list2env(setting, envir = globalenv())
beta.propensity <- beta.propensity(p)
## creates a "simResult" document with the different arguments, this is inside an "output" folder
#filename = paste0("output/simResult_", arg.date, "_beta", arg1, "_prop", arg2,
#                  "_n", arg3, "_crit", arg4, ".rds")
predictedPropensity <- function(state1, state2) {
# Compute the predicted probability using the logistic function
plogis(cbind(1, state1,state2) %*% beta.propensity)
}
### we don't need the predicted hazard, censoring, etc.
####### initializes 4 of the same empty lists with a length equal to n.stages
predictedPropensityvec <- vector("list", n.stages)
## iterates over each stage to basically write the same function in each slot of the vector
## basically use this so each stage uses the same functions
for (i in 1:n.stages) {
predictedPropensityvec[[i]] <- predictedPropensity
}
### 3. Run the simulation
skip.IHsurvrf <- FALSE
skip.zom <- TRUE
### commented out since we don't need it
## skip.gk <- skip.dw <- TRUE
cv.nodesize = FALSE
source("~/survrf/Scripts/Data Simulations/C21.simulation_body.R")
library(IHsurvrf)
library(IHsurvrf)
library(IHsurvrf)
library(IHsurvrf)
